// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package pipeline_upload_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadPipelineVersionParams creates a new UploadPipelineVersionParams object
// with the default values initialized.
func NewUploadPipelineVersionParams() *UploadPipelineVersionParams {
	var ()
	return &UploadPipelineVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadPipelineVersionParamsWithTimeout creates a new UploadPipelineVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadPipelineVersionParamsWithTimeout(timeout time.Duration) *UploadPipelineVersionParams {
	var ()
	return &UploadPipelineVersionParams{

		timeout: timeout,
	}
}

// NewUploadPipelineVersionParamsWithContext creates a new UploadPipelineVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadPipelineVersionParamsWithContext(ctx context.Context) *UploadPipelineVersionParams {
	var ()
	return &UploadPipelineVersionParams{

		Context: ctx,
	}
}

// NewUploadPipelineVersionParamsWithHTTPClient creates a new UploadPipelineVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadPipelineVersionParamsWithHTTPClient(client *http.Client) *UploadPipelineVersionParams {
	var ()
	return &UploadPipelineVersionParams{
		HTTPClient: client,
	}
}

/*UploadPipelineVersionParams contains all the parameters to send to the API endpoint
for the upload pipeline version operation typically these are written to a http.Request
*/
type UploadPipelineVersionParams struct {

	/*CodeSourceURL*/
	CodeSourceURL *string
	/*PipelineID*/
	PipelineID *string
	/*PipelineName*/
	PipelineName *string
	/*Uploadfile
	  The pipeline to upload. Maximum size of 32MB is supported.

	*/
	Uploadfile runtime.NamedReadCloser
	/*VersionName*/
	VersionName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithTimeout(timeout time.Duration) *UploadPipelineVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithContext(ctx context.Context) *UploadPipelineVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithHTTPClient(client *http.Client) *UploadPipelineVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCodeSourceURL adds the codeSourceURL to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithCodeSourceURL(codeSourceURL *string) *UploadPipelineVersionParams {
	o.SetCodeSourceURL(codeSourceURL)
	return o
}

// SetCodeSourceURL adds the codeSourceUrl to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetCodeSourceURL(codeSourceURL *string) {
	o.CodeSourceURL = codeSourceURL
}

// WithPipelineID adds the pipelineID to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithPipelineID(pipelineID *string) *UploadPipelineVersionParams {
	o.SetPipelineID(pipelineID)
	return o
}

// SetPipelineID adds the pipelineId to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetPipelineID(pipelineID *string) {
	o.PipelineID = pipelineID
}

// WithPipelineName adds the pipelineName to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithPipelineName(pipelineName *string) *UploadPipelineVersionParams {
	o.SetPipelineName(pipelineName)
	return o
}

// SetPipelineName adds the pipelineName to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetPipelineName(pipelineName *string) {
	o.PipelineName = pipelineName
}

// WithUploadfile adds the uploadfile to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithUploadfile(uploadfile runtime.NamedReadCloser) *UploadPipelineVersionParams {
	o.SetUploadfile(uploadfile)
	return o
}

// SetUploadfile adds the uploadfile to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetUploadfile(uploadfile runtime.NamedReadCloser) {
	o.Uploadfile = uploadfile
}

// WithVersionName adds the versionName to the upload pipeline version params
func (o *UploadPipelineVersionParams) WithVersionName(versionName *string) *UploadPipelineVersionParams {
	o.SetVersionName(versionName)
	return o
}

// SetVersionName adds the versionName to the upload pipeline version params
func (o *UploadPipelineVersionParams) SetVersionName(versionName *string) {
	o.VersionName = versionName
}

// WriteToRequest writes these params to a swagger request
func (o *UploadPipelineVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CodeSourceURL != nil {

		// query param codeSourceUrl
		var qrCodeSourceURL string
		if o.CodeSourceURL != nil {
			qrCodeSourceURL = *o.CodeSourceURL
		}
		qCodeSourceURL := qrCodeSourceURL
		if qCodeSourceURL != "" {
			if err := r.SetQueryParam("codeSourceUrl", qCodeSourceURL); err != nil {
				return err
			}
		}

	}

	if o.PipelineID != nil {

		// query param pipelineId
		var qrPipelineID string
		if o.PipelineID != nil {
			qrPipelineID = *o.PipelineID
		}
		qPipelineID := qrPipelineID
		if qPipelineID != "" {
			if err := r.SetQueryParam("pipelineId", qPipelineID); err != nil {
				return err
			}
		}

	}

	if o.PipelineName != nil {

		// query param pipelineName
		var qrPipelineName string
		if o.PipelineName != nil {
			qrPipelineName = *o.PipelineName
		}
		qPipelineName := qrPipelineName
		if qPipelineName != "" {
			if err := r.SetQueryParam("pipelineName", qPipelineName); err != nil {
				return err
			}
		}

	}

	// form file param uploadfile
	if err := r.SetFileParam("uploadfile", o.Uploadfile); err != nil {
		return err
	}

	if o.VersionName != nil {

		// query param versionName
		var qrVersionName string
		if o.VersionName != nil {
			qrVersionName = *o.VersionName
		}
		qVersionName := qrVersionName
		if qVersionName != "" {
			if err := r.SetQueryParam("versionName", qVersionName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
